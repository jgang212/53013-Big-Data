/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class WeatherData implements org.apache.thrift.TBase<WeatherData, WeatherData._Fields>, java.io.Serializable, Cloneable, Comparable<WeatherData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WeatherData");

  private static final org.apache.thrift.protocol.TField STN_FIELD_DESC = new org.apache.thrift.protocol.TField("STN", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField WBAN_FIELD_DESC = new org.apache.thrift.protocol.TField("WBAN", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField YEARMODA_FIELD_DESC = new org.apache.thrift.protocol.TField("YEARMODA", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TMP_FIELD_DESC = new org.apache.thrift.protocol.TField("TMP", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TMPCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("TMPCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DEWP_FIELD_DESC = new org.apache.thrift.protocol.TField("DEWP", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DEWPCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("DEWPCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SLP_FIELD_DESC = new org.apache.thrift.protocol.TField("SLP", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField SLPCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("SLPCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STP_FIELD_DESC = new org.apache.thrift.protocol.TField("STP", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField STPCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("STPCount", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField VISIB_FIELD_DESC = new org.apache.thrift.protocol.TField("VISIB", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField VISIBCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("VISIBCount", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField WDSP_FIELD_DESC = new org.apache.thrift.protocol.TField("WDSP", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField WDSPCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("WDSPCount", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField MAXSPD_FIELD_DESC = new org.apache.thrift.protocol.TField("MAXSPD", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField GUST_FIELD_DESC = new org.apache.thrift.protocol.TField("GUST", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("MAX", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField MAXFLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("MAXFlag", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("MIN", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField MINFLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("MINFlag", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PRCP_FIELD_DESC = new org.apache.thrift.protocol.TField("PRCP", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField PRCPFLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("PRCPFlag", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField SNDP_FIELD_DESC = new org.apache.thrift.protocol.TField("SNDP", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField FRSHTT_FIELD_DESC = new org.apache.thrift.protocol.TField("FRSHTT", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WeatherDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WeatherDataTupleSchemeFactory();

  public long STN; // required
  public long WBAN; // required
  public long YEARMODA; // required
  public double TMP; // required
  public long TMPCount; // required
  public double DEWP; // required
  public long DEWPCount; // required
  public double SLP; // required
  public long SLPCount; // required
  public double STP; // required
  public long STPCount; // required
  public double VISIB; // required
  public long VISIBCount; // required
  public double WDSP; // required
  public long WDSPCount; // required
  public double MAXSPD; // required
  public double GUST; // required
  public double MAX; // required
  public java.lang.String MAXFlag; // required
  public double MIN; // required
  public java.lang.String MINFlag; // required
  public double PRCP; // required
  public java.lang.String PRCPFlag; // required
  public double SNDP; // required
  public java.lang.String FRSHTT; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STN((short)1, "STN"),
    WBAN((short)2, "WBAN"),
    YEARMODA((short)3, "YEARMODA"),
    TMP((short)4, "TMP"),
    TMPCOUNT((short)5, "TMPCount"),
    DEWP((short)6, "DEWP"),
    DEWPCOUNT((short)7, "DEWPCount"),
    SLP((short)8, "SLP"),
    SLPCOUNT((short)9, "SLPCount"),
    STP((short)10, "STP"),
    STPCOUNT((short)11, "STPCount"),
    VISIB((short)12, "VISIB"),
    VISIBCOUNT((short)13, "VISIBCount"),
    WDSP((short)14, "WDSP"),
    WDSPCOUNT((short)15, "WDSPCount"),
    MAXSPD((short)16, "MAXSPD"),
    GUST((short)17, "GUST"),
    MAX((short)18, "MAX"),
    MAXFLAG((short)19, "MAXFlag"),
    MIN((short)20, "MIN"),
    MINFLAG((short)21, "MINFlag"),
    PRCP((short)22, "PRCP"),
    PRCPFLAG((short)23, "PRCPFlag"),
    SNDP((short)24, "SNDP"),
    FRSHTT((short)25, "FRSHTT");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STN
          return STN;
        case 2: // WBAN
          return WBAN;
        case 3: // YEARMODA
          return YEARMODA;
        case 4: // TMP
          return TMP;
        case 5: // TMPCOUNT
          return TMPCOUNT;
        case 6: // DEWP
          return DEWP;
        case 7: // DEWPCOUNT
          return DEWPCOUNT;
        case 8: // SLP
          return SLP;
        case 9: // SLPCOUNT
          return SLPCOUNT;
        case 10: // STP
          return STP;
        case 11: // STPCOUNT
          return STPCOUNT;
        case 12: // VISIB
          return VISIB;
        case 13: // VISIBCOUNT
          return VISIBCOUNT;
        case 14: // WDSP
          return WDSP;
        case 15: // WDSPCOUNT
          return WDSPCOUNT;
        case 16: // MAXSPD
          return MAXSPD;
        case 17: // GUST
          return GUST;
        case 18: // MAX
          return MAX;
        case 19: // MAXFLAG
          return MAXFLAG;
        case 20: // MIN
          return MIN;
        case 21: // MINFLAG
          return MINFLAG;
        case 22: // PRCP
          return PRCP;
        case 23: // PRCPFLAG
          return PRCPFLAG;
        case 24: // SNDP
          return SNDP;
        case 25: // FRSHTT
          return FRSHTT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STN_ISSET_ID = 0;
  private static final int __WBAN_ISSET_ID = 1;
  private static final int __YEARMODA_ISSET_ID = 2;
  private static final int __TMP_ISSET_ID = 3;
  private static final int __TMPCOUNT_ISSET_ID = 4;
  private static final int __DEWP_ISSET_ID = 5;
  private static final int __DEWPCOUNT_ISSET_ID = 6;
  private static final int __SLP_ISSET_ID = 7;
  private static final int __SLPCOUNT_ISSET_ID = 8;
  private static final int __STP_ISSET_ID = 9;
  private static final int __STPCOUNT_ISSET_ID = 10;
  private static final int __VISIB_ISSET_ID = 11;
  private static final int __VISIBCOUNT_ISSET_ID = 12;
  private static final int __WDSP_ISSET_ID = 13;
  private static final int __WDSPCOUNT_ISSET_ID = 14;
  private static final int __MAXSPD_ISSET_ID = 15;
  private static final int __GUST_ISSET_ID = 16;
  private static final int __MAX_ISSET_ID = 17;
  private static final int __MIN_ISSET_ID = 18;
  private static final int __PRCP_ISSET_ID = 19;
  private static final int __SNDP_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STN, new org.apache.thrift.meta_data.FieldMetaData("STN", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WBAN, new org.apache.thrift.meta_data.FieldMetaData("WBAN", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.YEARMODA, new org.apache.thrift.meta_data.FieldMetaData("YEARMODA", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TMP, new org.apache.thrift.meta_data.FieldMetaData("TMP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TMPCOUNT, new org.apache.thrift.meta_data.FieldMetaData("TMPCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEWP, new org.apache.thrift.meta_data.FieldMetaData("DEWP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEWPCOUNT, new org.apache.thrift.meta_data.FieldMetaData("DEWPCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLP, new org.apache.thrift.meta_data.FieldMetaData("SLP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLPCOUNT, new org.apache.thrift.meta_data.FieldMetaData("SLPCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STP, new org.apache.thrift.meta_data.FieldMetaData("STP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STPCOUNT, new org.apache.thrift.meta_data.FieldMetaData("STPCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIB, new org.apache.thrift.meta_data.FieldMetaData("VISIB", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VISIBCOUNT, new org.apache.thrift.meta_data.FieldMetaData("VISIBCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WDSP, new org.apache.thrift.meta_data.FieldMetaData("WDSP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WDSPCOUNT, new org.apache.thrift.meta_data.FieldMetaData("WDSPCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAXSPD, new org.apache.thrift.meta_data.FieldMetaData("MAXSPD", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GUST, new org.apache.thrift.meta_data.FieldMetaData("GUST", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("MAX", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAXFLAG, new org.apache.thrift.meta_data.FieldMetaData("MAXFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("MIN", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MINFLAG, new org.apache.thrift.meta_data.FieldMetaData("MINFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRCP, new org.apache.thrift.meta_data.FieldMetaData("PRCP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRCPFLAG, new org.apache.thrift.meta_data.FieldMetaData("PRCPFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNDP, new org.apache.thrift.meta_data.FieldMetaData("SNDP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FRSHTT, new org.apache.thrift.meta_data.FieldMetaData("FRSHTT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WeatherData.class, metaDataMap);
  }

  public WeatherData() {
  }

  public WeatherData(
    long STN,
    long WBAN,
    long YEARMODA,
    double TMP,
    long TMPCount,
    double DEWP,
    long DEWPCount,
    double SLP,
    long SLPCount,
    double STP,
    long STPCount,
    double VISIB,
    long VISIBCount,
    double WDSP,
    long WDSPCount,
    double MAXSPD,
    double GUST,
    double MAX,
    java.lang.String MAXFlag,
    double MIN,
    java.lang.String MINFlag,
    double PRCP,
    java.lang.String PRCPFlag,
    double SNDP,
    java.lang.String FRSHTT)
  {
    this();
    this.STN = STN;
    setSTNIsSet(true);
    this.WBAN = WBAN;
    setWBANIsSet(true);
    this.YEARMODA = YEARMODA;
    setYEARMODAIsSet(true);
    this.TMP = TMP;
    setTMPIsSet(true);
    this.TMPCount = TMPCount;
    setTMPCountIsSet(true);
    this.DEWP = DEWP;
    setDEWPIsSet(true);
    this.DEWPCount = DEWPCount;
    setDEWPCountIsSet(true);
    this.SLP = SLP;
    setSLPIsSet(true);
    this.SLPCount = SLPCount;
    setSLPCountIsSet(true);
    this.STP = STP;
    setSTPIsSet(true);
    this.STPCount = STPCount;
    setSTPCountIsSet(true);
    this.VISIB = VISIB;
    setVISIBIsSet(true);
    this.VISIBCount = VISIBCount;
    setVISIBCountIsSet(true);
    this.WDSP = WDSP;
    setWDSPIsSet(true);
    this.WDSPCount = WDSPCount;
    setWDSPCountIsSet(true);
    this.MAXSPD = MAXSPD;
    setMAXSPDIsSet(true);
    this.GUST = GUST;
    setGUSTIsSet(true);
    this.MAX = MAX;
    setMAXIsSet(true);
    this.MAXFlag = MAXFlag;
    this.MIN = MIN;
    setMINIsSet(true);
    this.MINFlag = MINFlag;
    this.PRCP = PRCP;
    setPRCPIsSet(true);
    this.PRCPFlag = PRCPFlag;
    this.SNDP = SNDP;
    setSNDPIsSet(true);
    this.FRSHTT = FRSHTT;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WeatherData(WeatherData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.STN = other.STN;
    this.WBAN = other.WBAN;
    this.YEARMODA = other.YEARMODA;
    this.TMP = other.TMP;
    this.TMPCount = other.TMPCount;
    this.DEWP = other.DEWP;
    this.DEWPCount = other.DEWPCount;
    this.SLP = other.SLP;
    this.SLPCount = other.SLPCount;
    this.STP = other.STP;
    this.STPCount = other.STPCount;
    this.VISIB = other.VISIB;
    this.VISIBCount = other.VISIBCount;
    this.WDSP = other.WDSP;
    this.WDSPCount = other.WDSPCount;
    this.MAXSPD = other.MAXSPD;
    this.GUST = other.GUST;
    this.MAX = other.MAX;
    if (other.isSetMAXFlag()) {
      this.MAXFlag = other.MAXFlag;
    }
    this.MIN = other.MIN;
    if (other.isSetMINFlag()) {
      this.MINFlag = other.MINFlag;
    }
    this.PRCP = other.PRCP;
    if (other.isSetPRCPFlag()) {
      this.PRCPFlag = other.PRCPFlag;
    }
    this.SNDP = other.SNDP;
    if (other.isSetFRSHTT()) {
      this.FRSHTT = other.FRSHTT;
    }
  }

  public WeatherData deepCopy() {
    return new WeatherData(this);
  }

  @Override
  public void clear() {
    setSTNIsSet(false);
    this.STN = 0;
    setWBANIsSet(false);
    this.WBAN = 0;
    setYEARMODAIsSet(false);
    this.YEARMODA = 0;
    setTMPIsSet(false);
    this.TMP = 0.0;
    setTMPCountIsSet(false);
    this.TMPCount = 0;
    setDEWPIsSet(false);
    this.DEWP = 0.0;
    setDEWPCountIsSet(false);
    this.DEWPCount = 0;
    setSLPIsSet(false);
    this.SLP = 0.0;
    setSLPCountIsSet(false);
    this.SLPCount = 0;
    setSTPIsSet(false);
    this.STP = 0.0;
    setSTPCountIsSet(false);
    this.STPCount = 0;
    setVISIBIsSet(false);
    this.VISIB = 0.0;
    setVISIBCountIsSet(false);
    this.VISIBCount = 0;
    setWDSPIsSet(false);
    this.WDSP = 0.0;
    setWDSPCountIsSet(false);
    this.WDSPCount = 0;
    setMAXSPDIsSet(false);
    this.MAXSPD = 0.0;
    setGUSTIsSet(false);
    this.GUST = 0.0;
    setMAXIsSet(false);
    this.MAX = 0.0;
    this.MAXFlag = null;
    setMINIsSet(false);
    this.MIN = 0.0;
    this.MINFlag = null;
    setPRCPIsSet(false);
    this.PRCP = 0.0;
    this.PRCPFlag = null;
    setSNDPIsSet(false);
    this.SNDP = 0.0;
    this.FRSHTT = null;
  }

  public long getSTN() {
    return this.STN;
  }

  public WeatherData setSTN(long STN) {
    this.STN = STN;
    setSTNIsSet(true);
    return this;
  }

  public void unsetSTN() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STN_ISSET_ID);
  }

  /** Returns true if field STN is set (has been assigned a value) and false otherwise */
  public boolean isSetSTN() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STN_ISSET_ID);
  }

  public void setSTNIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STN_ISSET_ID, value);
  }

  public long getWBAN() {
    return this.WBAN;
  }

  public WeatherData setWBAN(long WBAN) {
    this.WBAN = WBAN;
    setWBANIsSet(true);
    return this;
  }

  public void unsetWBAN() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WBAN_ISSET_ID);
  }

  /** Returns true if field WBAN is set (has been assigned a value) and false otherwise */
  public boolean isSetWBAN() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WBAN_ISSET_ID);
  }

  public void setWBANIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WBAN_ISSET_ID, value);
  }

  public long getYEARMODA() {
    return this.YEARMODA;
  }

  public WeatherData setYEARMODA(long YEARMODA) {
    this.YEARMODA = YEARMODA;
    setYEARMODAIsSet(true);
    return this;
  }

  public void unsetYEARMODA() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YEARMODA_ISSET_ID);
  }

  /** Returns true if field YEARMODA is set (has been assigned a value) and false otherwise */
  public boolean isSetYEARMODA() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YEARMODA_ISSET_ID);
  }

  public void setYEARMODAIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YEARMODA_ISSET_ID, value);
  }

  public double getTMP() {
    return this.TMP;
  }

  public WeatherData setTMP(double TMP) {
    this.TMP = TMP;
    setTMPIsSet(true);
    return this;
  }

  public void unsetTMP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TMP_ISSET_ID);
  }

  /** Returns true if field TMP is set (has been assigned a value) and false otherwise */
  public boolean isSetTMP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TMP_ISSET_ID);
  }

  public void setTMPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TMP_ISSET_ID, value);
  }

  public long getTMPCount() {
    return this.TMPCount;
  }

  public WeatherData setTMPCount(long TMPCount) {
    this.TMPCount = TMPCount;
    setTMPCountIsSet(true);
    return this;
  }

  public void unsetTMPCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TMPCOUNT_ISSET_ID);
  }

  /** Returns true if field TMPCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTMPCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TMPCOUNT_ISSET_ID);
  }

  public void setTMPCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TMPCOUNT_ISSET_ID, value);
  }

  public double getDEWP() {
    return this.DEWP;
  }

  public WeatherData setDEWP(double DEWP) {
    this.DEWP = DEWP;
    setDEWPIsSet(true);
    return this;
  }

  public void unsetDEWP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEWP_ISSET_ID);
  }

  /** Returns true if field DEWP is set (has been assigned a value) and false otherwise */
  public boolean isSetDEWP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEWP_ISSET_ID);
  }

  public void setDEWPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEWP_ISSET_ID, value);
  }

  public long getDEWPCount() {
    return this.DEWPCount;
  }

  public WeatherData setDEWPCount(long DEWPCount) {
    this.DEWPCount = DEWPCount;
    setDEWPCountIsSet(true);
    return this;
  }

  public void unsetDEWPCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEWPCOUNT_ISSET_ID);
  }

  /** Returns true if field DEWPCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDEWPCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEWPCOUNT_ISSET_ID);
  }

  public void setDEWPCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEWPCOUNT_ISSET_ID, value);
  }

  public double getSLP() {
    return this.SLP;
  }

  public WeatherData setSLP(double SLP) {
    this.SLP = SLP;
    setSLPIsSet(true);
    return this;
  }

  public void unsetSLP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLP_ISSET_ID);
  }

  /** Returns true if field SLP is set (has been assigned a value) and false otherwise */
  public boolean isSetSLP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLP_ISSET_ID);
  }

  public void setSLPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLP_ISSET_ID, value);
  }

  public long getSLPCount() {
    return this.SLPCount;
  }

  public WeatherData setSLPCount(long SLPCount) {
    this.SLPCount = SLPCount;
    setSLPCountIsSet(true);
    return this;
  }

  public void unsetSLPCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLPCOUNT_ISSET_ID);
  }

  /** Returns true if field SLPCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSLPCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLPCOUNT_ISSET_ID);
  }

  public void setSLPCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLPCOUNT_ISSET_ID, value);
  }

  public double getSTP() {
    return this.STP;
  }

  public WeatherData setSTP(double STP) {
    this.STP = STP;
    setSTPIsSet(true);
    return this;
  }

  public void unsetSTP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STP_ISSET_ID);
  }

  /** Returns true if field STP is set (has been assigned a value) and false otherwise */
  public boolean isSetSTP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STP_ISSET_ID);
  }

  public void setSTPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STP_ISSET_ID, value);
  }

  public long getSTPCount() {
    return this.STPCount;
  }

  public WeatherData setSTPCount(long STPCount) {
    this.STPCount = STPCount;
    setSTPCountIsSet(true);
    return this;
  }

  public void unsetSTPCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STPCOUNT_ISSET_ID);
  }

  /** Returns true if field STPCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSTPCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STPCOUNT_ISSET_ID);
  }

  public void setSTPCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STPCOUNT_ISSET_ID, value);
  }

  public double getVISIB() {
    return this.VISIB;
  }

  public WeatherData setVISIB(double VISIB) {
    this.VISIB = VISIB;
    setVISIBIsSet(true);
    return this;
  }

  public void unsetVISIB() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIB_ISSET_ID);
  }

  /** Returns true if field VISIB is set (has been assigned a value) and false otherwise */
  public boolean isSetVISIB() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIB_ISSET_ID);
  }

  public void setVISIBIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIB_ISSET_ID, value);
  }

  public long getVISIBCount() {
    return this.VISIBCount;
  }

  public WeatherData setVISIBCount(long VISIBCount) {
    this.VISIBCount = VISIBCount;
    setVISIBCountIsSet(true);
    return this;
  }

  public void unsetVISIBCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIBCOUNT_ISSET_ID);
  }

  /** Returns true if field VISIBCount is set (has been assigned a value) and false otherwise */
  public boolean isSetVISIBCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIBCOUNT_ISSET_ID);
  }

  public void setVISIBCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIBCOUNT_ISSET_ID, value);
  }

  public double getWDSP() {
    return this.WDSP;
  }

  public WeatherData setWDSP(double WDSP) {
    this.WDSP = WDSP;
    setWDSPIsSet(true);
    return this;
  }

  public void unsetWDSP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WDSP_ISSET_ID);
  }

  /** Returns true if field WDSP is set (has been assigned a value) and false otherwise */
  public boolean isSetWDSP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WDSP_ISSET_ID);
  }

  public void setWDSPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WDSP_ISSET_ID, value);
  }

  public long getWDSPCount() {
    return this.WDSPCount;
  }

  public WeatherData setWDSPCount(long WDSPCount) {
    this.WDSPCount = WDSPCount;
    setWDSPCountIsSet(true);
    return this;
  }

  public void unsetWDSPCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WDSPCOUNT_ISSET_ID);
  }

  /** Returns true if field WDSPCount is set (has been assigned a value) and false otherwise */
  public boolean isSetWDSPCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WDSPCOUNT_ISSET_ID);
  }

  public void setWDSPCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WDSPCOUNT_ISSET_ID, value);
  }

  public double getMAXSPD() {
    return this.MAXSPD;
  }

  public WeatherData setMAXSPD(double MAXSPD) {
    this.MAXSPD = MAXSPD;
    setMAXSPDIsSet(true);
    return this;
  }

  public void unsetMAXSPD() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXSPD_ISSET_ID);
  }

  /** Returns true if field MAXSPD is set (has been assigned a value) and false otherwise */
  public boolean isSetMAXSPD() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXSPD_ISSET_ID);
  }

  public void setMAXSPDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXSPD_ISSET_ID, value);
  }

  public double getGUST() {
    return this.GUST;
  }

  public WeatherData setGUST(double GUST) {
    this.GUST = GUST;
    setGUSTIsSet(true);
    return this;
  }

  public void unsetGUST() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GUST_ISSET_ID);
  }

  /** Returns true if field GUST is set (has been assigned a value) and false otherwise */
  public boolean isSetGUST() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GUST_ISSET_ID);
  }

  public void setGUSTIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GUST_ISSET_ID, value);
  }

  public double getMAX() {
    return this.MAX;
  }

  public WeatherData setMAX(double MAX) {
    this.MAX = MAX;
    setMAXIsSet(true);
    return this;
  }

  public void unsetMAX() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field MAX is set (has been assigned a value) and false otherwise */
  public boolean isSetMAX() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void setMAXIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public java.lang.String getMAXFlag() {
    return this.MAXFlag;
  }

  public WeatherData setMAXFlag(java.lang.String MAXFlag) {
    this.MAXFlag = MAXFlag;
    return this;
  }

  public void unsetMAXFlag() {
    this.MAXFlag = null;
  }

  /** Returns true if field MAXFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetMAXFlag() {
    return this.MAXFlag != null;
  }

  public void setMAXFlagIsSet(boolean value) {
    if (!value) {
      this.MAXFlag = null;
    }
  }

  public double getMIN() {
    return this.MIN;
  }

  public WeatherData setMIN(double MIN) {
    this.MIN = MIN;
    setMINIsSet(true);
    return this;
  }

  public void unsetMIN() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  /** Returns true if field MIN is set (has been assigned a value) and false otherwise */
  public boolean isSetMIN() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  public void setMINIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
  }

  public java.lang.String getMINFlag() {
    return this.MINFlag;
  }

  public WeatherData setMINFlag(java.lang.String MINFlag) {
    this.MINFlag = MINFlag;
    return this;
  }

  public void unsetMINFlag() {
    this.MINFlag = null;
  }

  /** Returns true if field MINFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetMINFlag() {
    return this.MINFlag != null;
  }

  public void setMINFlagIsSet(boolean value) {
    if (!value) {
      this.MINFlag = null;
    }
  }

  public double getPRCP() {
    return this.PRCP;
  }

  public WeatherData setPRCP(double PRCP) {
    this.PRCP = PRCP;
    setPRCPIsSet(true);
    return this;
  }

  public void unsetPRCP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRCP_ISSET_ID);
  }

  /** Returns true if field PRCP is set (has been assigned a value) and false otherwise */
  public boolean isSetPRCP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRCP_ISSET_ID);
  }

  public void setPRCPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRCP_ISSET_ID, value);
  }

  public java.lang.String getPRCPFlag() {
    return this.PRCPFlag;
  }

  public WeatherData setPRCPFlag(java.lang.String PRCPFlag) {
    this.PRCPFlag = PRCPFlag;
    return this;
  }

  public void unsetPRCPFlag() {
    this.PRCPFlag = null;
  }

  /** Returns true if field PRCPFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetPRCPFlag() {
    return this.PRCPFlag != null;
  }

  public void setPRCPFlagIsSet(boolean value) {
    if (!value) {
      this.PRCPFlag = null;
    }
  }

  public double getSNDP() {
    return this.SNDP;
  }

  public WeatherData setSNDP(double SNDP) {
    this.SNDP = SNDP;
    setSNDPIsSet(true);
    return this;
  }

  public void unsetSNDP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SNDP_ISSET_ID);
  }

  /** Returns true if field SNDP is set (has been assigned a value) and false otherwise */
  public boolean isSetSNDP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SNDP_ISSET_ID);
  }

  public void setSNDPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SNDP_ISSET_ID, value);
  }

  public java.lang.String getFRSHTT() {
    return this.FRSHTT;
  }

  public WeatherData setFRSHTT(java.lang.String FRSHTT) {
    this.FRSHTT = FRSHTT;
    return this;
  }

  public void unsetFRSHTT() {
    this.FRSHTT = null;
  }

  /** Returns true if field FRSHTT is set (has been assigned a value) and false otherwise */
  public boolean isSetFRSHTT() {
    return this.FRSHTT != null;
  }

  public void setFRSHTTIsSet(boolean value) {
    if (!value) {
      this.FRSHTT = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STN:
      if (value == null) {
        unsetSTN();
      } else {
        setSTN((java.lang.Long)value);
      }
      break;

    case WBAN:
      if (value == null) {
        unsetWBAN();
      } else {
        setWBAN((java.lang.Long)value);
      }
      break;

    case YEARMODA:
      if (value == null) {
        unsetYEARMODA();
      } else {
        setYEARMODA((java.lang.Long)value);
      }
      break;

    case TMP:
      if (value == null) {
        unsetTMP();
      } else {
        setTMP((java.lang.Double)value);
      }
      break;

    case TMPCOUNT:
      if (value == null) {
        unsetTMPCount();
      } else {
        setTMPCount((java.lang.Long)value);
      }
      break;

    case DEWP:
      if (value == null) {
        unsetDEWP();
      } else {
        setDEWP((java.lang.Double)value);
      }
      break;

    case DEWPCOUNT:
      if (value == null) {
        unsetDEWPCount();
      } else {
        setDEWPCount((java.lang.Long)value);
      }
      break;

    case SLP:
      if (value == null) {
        unsetSLP();
      } else {
        setSLP((java.lang.Double)value);
      }
      break;

    case SLPCOUNT:
      if (value == null) {
        unsetSLPCount();
      } else {
        setSLPCount((java.lang.Long)value);
      }
      break;

    case STP:
      if (value == null) {
        unsetSTP();
      } else {
        setSTP((java.lang.Double)value);
      }
      break;

    case STPCOUNT:
      if (value == null) {
        unsetSTPCount();
      } else {
        setSTPCount((java.lang.Long)value);
      }
      break;

    case VISIB:
      if (value == null) {
        unsetVISIB();
      } else {
        setVISIB((java.lang.Double)value);
      }
      break;

    case VISIBCOUNT:
      if (value == null) {
        unsetVISIBCount();
      } else {
        setVISIBCount((java.lang.Long)value);
      }
      break;

    case WDSP:
      if (value == null) {
        unsetWDSP();
      } else {
        setWDSP((java.lang.Double)value);
      }
      break;

    case WDSPCOUNT:
      if (value == null) {
        unsetWDSPCount();
      } else {
        setWDSPCount((java.lang.Long)value);
      }
      break;

    case MAXSPD:
      if (value == null) {
        unsetMAXSPD();
      } else {
        setMAXSPD((java.lang.Double)value);
      }
      break;

    case GUST:
      if (value == null) {
        unsetGUST();
      } else {
        setGUST((java.lang.Double)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMAX();
      } else {
        setMAX((java.lang.Double)value);
      }
      break;

    case MAXFLAG:
      if (value == null) {
        unsetMAXFlag();
      } else {
        setMAXFlag((java.lang.String)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMIN();
      } else {
        setMIN((java.lang.Double)value);
      }
      break;

    case MINFLAG:
      if (value == null) {
        unsetMINFlag();
      } else {
        setMINFlag((java.lang.String)value);
      }
      break;

    case PRCP:
      if (value == null) {
        unsetPRCP();
      } else {
        setPRCP((java.lang.Double)value);
      }
      break;

    case PRCPFLAG:
      if (value == null) {
        unsetPRCPFlag();
      } else {
        setPRCPFlag((java.lang.String)value);
      }
      break;

    case SNDP:
      if (value == null) {
        unsetSNDP();
      } else {
        setSNDP((java.lang.Double)value);
      }
      break;

    case FRSHTT:
      if (value == null) {
        unsetFRSHTT();
      } else {
        setFRSHTT((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STN:
      return getSTN();

    case WBAN:
      return getWBAN();

    case YEARMODA:
      return getYEARMODA();

    case TMP:
      return getTMP();

    case TMPCOUNT:
      return getTMPCount();

    case DEWP:
      return getDEWP();

    case DEWPCOUNT:
      return getDEWPCount();

    case SLP:
      return getSLP();

    case SLPCOUNT:
      return getSLPCount();

    case STP:
      return getSTP();

    case STPCOUNT:
      return getSTPCount();

    case VISIB:
      return getVISIB();

    case VISIBCOUNT:
      return getVISIBCount();

    case WDSP:
      return getWDSP();

    case WDSPCOUNT:
      return getWDSPCount();

    case MAXSPD:
      return getMAXSPD();

    case GUST:
      return getGUST();

    case MAX:
      return getMAX();

    case MAXFLAG:
      return getMAXFlag();

    case MIN:
      return getMIN();

    case MINFLAG:
      return getMINFlag();

    case PRCP:
      return getPRCP();

    case PRCPFLAG:
      return getPRCPFlag();

    case SNDP:
      return getSNDP();

    case FRSHTT:
      return getFRSHTT();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STN:
      return isSetSTN();
    case WBAN:
      return isSetWBAN();
    case YEARMODA:
      return isSetYEARMODA();
    case TMP:
      return isSetTMP();
    case TMPCOUNT:
      return isSetTMPCount();
    case DEWP:
      return isSetDEWP();
    case DEWPCOUNT:
      return isSetDEWPCount();
    case SLP:
      return isSetSLP();
    case SLPCOUNT:
      return isSetSLPCount();
    case STP:
      return isSetSTP();
    case STPCOUNT:
      return isSetSTPCount();
    case VISIB:
      return isSetVISIB();
    case VISIBCOUNT:
      return isSetVISIBCount();
    case WDSP:
      return isSetWDSP();
    case WDSPCOUNT:
      return isSetWDSPCount();
    case MAXSPD:
      return isSetMAXSPD();
    case GUST:
      return isSetGUST();
    case MAX:
      return isSetMAX();
    case MAXFLAG:
      return isSetMAXFlag();
    case MIN:
      return isSetMIN();
    case MINFLAG:
      return isSetMINFlag();
    case PRCP:
      return isSetPRCP();
    case PRCPFLAG:
      return isSetPRCPFlag();
    case SNDP:
      return isSetSNDP();
    case FRSHTT:
      return isSetFRSHTT();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WeatherData)
      return this.equals((WeatherData)that);
    return false;
  }

  public boolean equals(WeatherData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_STN = true;
    boolean that_present_STN = true;
    if (this_present_STN || that_present_STN) {
      if (!(this_present_STN && that_present_STN))
        return false;
      if (this.STN != that.STN)
        return false;
    }

    boolean this_present_WBAN = true;
    boolean that_present_WBAN = true;
    if (this_present_WBAN || that_present_WBAN) {
      if (!(this_present_WBAN && that_present_WBAN))
        return false;
      if (this.WBAN != that.WBAN)
        return false;
    }

    boolean this_present_YEARMODA = true;
    boolean that_present_YEARMODA = true;
    if (this_present_YEARMODA || that_present_YEARMODA) {
      if (!(this_present_YEARMODA && that_present_YEARMODA))
        return false;
      if (this.YEARMODA != that.YEARMODA)
        return false;
    }

    boolean this_present_TMP = true;
    boolean that_present_TMP = true;
    if (this_present_TMP || that_present_TMP) {
      if (!(this_present_TMP && that_present_TMP))
        return false;
      if (this.TMP != that.TMP)
        return false;
    }

    boolean this_present_TMPCount = true;
    boolean that_present_TMPCount = true;
    if (this_present_TMPCount || that_present_TMPCount) {
      if (!(this_present_TMPCount && that_present_TMPCount))
        return false;
      if (this.TMPCount != that.TMPCount)
        return false;
    }

    boolean this_present_DEWP = true;
    boolean that_present_DEWP = true;
    if (this_present_DEWP || that_present_DEWP) {
      if (!(this_present_DEWP && that_present_DEWP))
        return false;
      if (this.DEWP != that.DEWP)
        return false;
    }

    boolean this_present_DEWPCount = true;
    boolean that_present_DEWPCount = true;
    if (this_present_DEWPCount || that_present_DEWPCount) {
      if (!(this_present_DEWPCount && that_present_DEWPCount))
        return false;
      if (this.DEWPCount != that.DEWPCount)
        return false;
    }

    boolean this_present_SLP = true;
    boolean that_present_SLP = true;
    if (this_present_SLP || that_present_SLP) {
      if (!(this_present_SLP && that_present_SLP))
        return false;
      if (this.SLP != that.SLP)
        return false;
    }

    boolean this_present_SLPCount = true;
    boolean that_present_SLPCount = true;
    if (this_present_SLPCount || that_present_SLPCount) {
      if (!(this_present_SLPCount && that_present_SLPCount))
        return false;
      if (this.SLPCount != that.SLPCount)
        return false;
    }

    boolean this_present_STP = true;
    boolean that_present_STP = true;
    if (this_present_STP || that_present_STP) {
      if (!(this_present_STP && that_present_STP))
        return false;
      if (this.STP != that.STP)
        return false;
    }

    boolean this_present_STPCount = true;
    boolean that_present_STPCount = true;
    if (this_present_STPCount || that_present_STPCount) {
      if (!(this_present_STPCount && that_present_STPCount))
        return false;
      if (this.STPCount != that.STPCount)
        return false;
    }

    boolean this_present_VISIB = true;
    boolean that_present_VISIB = true;
    if (this_present_VISIB || that_present_VISIB) {
      if (!(this_present_VISIB && that_present_VISIB))
        return false;
      if (this.VISIB != that.VISIB)
        return false;
    }

    boolean this_present_VISIBCount = true;
    boolean that_present_VISIBCount = true;
    if (this_present_VISIBCount || that_present_VISIBCount) {
      if (!(this_present_VISIBCount && that_present_VISIBCount))
        return false;
      if (this.VISIBCount != that.VISIBCount)
        return false;
    }

    boolean this_present_WDSP = true;
    boolean that_present_WDSP = true;
    if (this_present_WDSP || that_present_WDSP) {
      if (!(this_present_WDSP && that_present_WDSP))
        return false;
      if (this.WDSP != that.WDSP)
        return false;
    }

    boolean this_present_WDSPCount = true;
    boolean that_present_WDSPCount = true;
    if (this_present_WDSPCount || that_present_WDSPCount) {
      if (!(this_present_WDSPCount && that_present_WDSPCount))
        return false;
      if (this.WDSPCount != that.WDSPCount)
        return false;
    }

    boolean this_present_MAXSPD = true;
    boolean that_present_MAXSPD = true;
    if (this_present_MAXSPD || that_present_MAXSPD) {
      if (!(this_present_MAXSPD && that_present_MAXSPD))
        return false;
      if (this.MAXSPD != that.MAXSPD)
        return false;
    }

    boolean this_present_GUST = true;
    boolean that_present_GUST = true;
    if (this_present_GUST || that_present_GUST) {
      if (!(this_present_GUST && that_present_GUST))
        return false;
      if (this.GUST != that.GUST)
        return false;
    }

    boolean this_present_MAX = true;
    boolean that_present_MAX = true;
    if (this_present_MAX || that_present_MAX) {
      if (!(this_present_MAX && that_present_MAX))
        return false;
      if (this.MAX != that.MAX)
        return false;
    }

    boolean this_present_MAXFlag = true && this.isSetMAXFlag();
    boolean that_present_MAXFlag = true && that.isSetMAXFlag();
    if (this_present_MAXFlag || that_present_MAXFlag) {
      if (!(this_present_MAXFlag && that_present_MAXFlag))
        return false;
      if (!this.MAXFlag.equals(that.MAXFlag))
        return false;
    }

    boolean this_present_MIN = true;
    boolean that_present_MIN = true;
    if (this_present_MIN || that_present_MIN) {
      if (!(this_present_MIN && that_present_MIN))
        return false;
      if (this.MIN != that.MIN)
        return false;
    }

    boolean this_present_MINFlag = true && this.isSetMINFlag();
    boolean that_present_MINFlag = true && that.isSetMINFlag();
    if (this_present_MINFlag || that_present_MINFlag) {
      if (!(this_present_MINFlag && that_present_MINFlag))
        return false;
      if (!this.MINFlag.equals(that.MINFlag))
        return false;
    }

    boolean this_present_PRCP = true;
    boolean that_present_PRCP = true;
    if (this_present_PRCP || that_present_PRCP) {
      if (!(this_present_PRCP && that_present_PRCP))
        return false;
      if (this.PRCP != that.PRCP)
        return false;
    }

    boolean this_present_PRCPFlag = true && this.isSetPRCPFlag();
    boolean that_present_PRCPFlag = true && that.isSetPRCPFlag();
    if (this_present_PRCPFlag || that_present_PRCPFlag) {
      if (!(this_present_PRCPFlag && that_present_PRCPFlag))
        return false;
      if (!this.PRCPFlag.equals(that.PRCPFlag))
        return false;
    }

    boolean this_present_SNDP = true;
    boolean that_present_SNDP = true;
    if (this_present_SNDP || that_present_SNDP) {
      if (!(this_present_SNDP && that_present_SNDP))
        return false;
      if (this.SNDP != that.SNDP)
        return false;
    }

    boolean this_present_FRSHTT = true && this.isSetFRSHTT();
    boolean that_present_FRSHTT = true && that.isSetFRSHTT();
    if (this_present_FRSHTT || that_present_FRSHTT) {
      if (!(this_present_FRSHTT && that_present_FRSHTT))
        return false;
      if (!this.FRSHTT.equals(that.FRSHTT))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(STN);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(WBAN);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(YEARMODA);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(TMP);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(TMPCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(DEWP);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(DEWPCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(SLP);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(SLPCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(STP);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(STPCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(VISIB);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(VISIBCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(WDSP);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(WDSPCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(MAXSPD);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(GUST);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(MAX);

    hashCode = hashCode * 8191 + ((isSetMAXFlag()) ? 131071 : 524287);
    if (isSetMAXFlag())
      hashCode = hashCode * 8191 + MAXFlag.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(MIN);

    hashCode = hashCode * 8191 + ((isSetMINFlag()) ? 131071 : 524287);
    if (isSetMINFlag())
      hashCode = hashCode * 8191 + MINFlag.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(PRCP);

    hashCode = hashCode * 8191 + ((isSetPRCPFlag()) ? 131071 : 524287);
    if (isSetPRCPFlag())
      hashCode = hashCode * 8191 + PRCPFlag.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(SNDP);

    hashCode = hashCode * 8191 + ((isSetFRSHTT()) ? 131071 : 524287);
    if (isSetFRSHTT())
      hashCode = hashCode * 8191 + FRSHTT.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WeatherData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSTN()).compareTo(other.isSetSTN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSTN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.STN, other.STN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWBAN()).compareTo(other.isSetWBAN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWBAN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WBAN, other.WBAN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYEARMODA()).compareTo(other.isSetYEARMODA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYEARMODA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.YEARMODA, other.YEARMODA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTMP()).compareTo(other.isSetTMP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTMP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TMP, other.TMP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTMPCount()).compareTo(other.isSetTMPCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTMPCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TMPCount, other.TMPCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDEWP()).compareTo(other.isSetDEWP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDEWP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DEWP, other.DEWP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDEWPCount()).compareTo(other.isSetDEWPCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDEWPCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DEWPCount, other.DEWPCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSLP()).compareTo(other.isSetSLP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSLP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SLP, other.SLP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSLPCount()).compareTo(other.isSetSLPCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSLPCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SLPCount, other.SLPCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSTP()).compareTo(other.isSetSTP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSTP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.STP, other.STP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSTPCount()).compareTo(other.isSetSTPCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSTPCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.STPCount, other.STPCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVISIB()).compareTo(other.isSetVISIB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVISIB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VISIB, other.VISIB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVISIBCount()).compareTo(other.isSetVISIBCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVISIBCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VISIBCount, other.VISIBCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWDSP()).compareTo(other.isSetWDSP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWDSP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WDSP, other.WDSP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWDSPCount()).compareTo(other.isSetWDSPCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWDSPCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WDSPCount, other.WDSPCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMAXSPD()).compareTo(other.isSetMAXSPD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMAXSPD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MAXSPD, other.MAXSPD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGUST()).compareTo(other.isSetGUST());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGUST()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GUST, other.GUST);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMAX()).compareTo(other.isSetMAX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMAX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MAX, other.MAX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMAXFlag()).compareTo(other.isSetMAXFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMAXFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MAXFlag, other.MAXFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMIN()).compareTo(other.isSetMIN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMIN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MIN, other.MIN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMINFlag()).compareTo(other.isSetMINFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMINFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MINFlag, other.MINFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPRCP()).compareTo(other.isSetPRCP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRCP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRCP, other.PRCP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPRCPFlag()).compareTo(other.isSetPRCPFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRCPFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRCPFlag, other.PRCPFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSNDP()).compareTo(other.isSetSNDP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSNDP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SNDP, other.SNDP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFRSHTT()).compareTo(other.isSetFRSHTT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFRSHTT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FRSHTT, other.FRSHTT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WeatherData(");
    boolean first = true;

    sb.append("STN:");
    sb.append(this.STN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("WBAN:");
    sb.append(this.WBAN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("YEARMODA:");
    sb.append(this.YEARMODA);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TMP:");
    sb.append(this.TMP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TMPCount:");
    sb.append(this.TMPCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DEWP:");
    sb.append(this.DEWP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DEWPCount:");
    sb.append(this.DEWPCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SLP:");
    sb.append(this.SLP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SLPCount:");
    sb.append(this.SLPCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("STP:");
    sb.append(this.STP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("STPCount:");
    sb.append(this.STPCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("VISIB:");
    sb.append(this.VISIB);
    first = false;
    if (!first) sb.append(", ");
    sb.append("VISIBCount:");
    sb.append(this.VISIBCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("WDSP:");
    sb.append(this.WDSP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("WDSPCount:");
    sb.append(this.WDSPCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MAXSPD:");
    sb.append(this.MAXSPD);
    first = false;
    if (!first) sb.append(", ");
    sb.append("GUST:");
    sb.append(this.GUST);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MAX:");
    sb.append(this.MAX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MAXFlag:");
    if (this.MAXFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.MAXFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MIN:");
    sb.append(this.MIN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MINFlag:");
    if (this.MINFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.MINFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PRCP:");
    sb.append(this.PRCP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PRCPFlag:");
    if (this.PRCPFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.PRCPFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SNDP:");
    sb.append(this.SNDP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FRSHTT:");
    if (this.FRSHTT == null) {
      sb.append("null");
    } else {
      sb.append(this.FRSHTT);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'STN' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'WBAN' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'YEARMODA' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'TMP' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'TMPCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DEWP' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DEWPCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SLP' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SLPCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'STP' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'STPCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'VISIB' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'VISIBCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'WDSP' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'WDSPCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'MAXSPD' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'GUST' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'MAX' because it's a primitive and you chose the non-beans generator.
    if (MAXFlag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'MAXFlag' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'MIN' because it's a primitive and you chose the non-beans generator.
    if (MINFlag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'MINFlag' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'PRCP' because it's a primitive and you chose the non-beans generator.
    if (PRCPFlag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'PRCPFlag' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'SNDP' because it's a primitive and you chose the non-beans generator.
    if (FRSHTT == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'FRSHTT' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeatherDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeatherDataStandardScheme getScheme() {
      return new WeatherDataStandardScheme();
    }
  }

  private static class WeatherDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<WeatherData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WeatherData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.STN = iprot.readI64();
              struct.setSTNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WBAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.WBAN = iprot.readI64();
              struct.setWBANIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YEARMODA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.YEARMODA = iprot.readI64();
              struct.setYEARMODAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TMP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.TMP = iprot.readDouble();
              struct.setTMPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TMPCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.TMPCount = iprot.readI64();
              struct.setTMPCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEWP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.DEWP = iprot.readDouble();
              struct.setDEWPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEWPCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DEWPCount = iprot.readI64();
              struct.setDEWPCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SLP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SLP = iprot.readDouble();
              struct.setSLPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SLPCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.SLPCount = iprot.readI64();
              struct.setSLPCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.STP = iprot.readDouble();
              struct.setSTPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STPCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.STPCount = iprot.readI64();
              struct.setSTPCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VISIB
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.VISIB = iprot.readDouble();
              struct.setVISIBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VISIBCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.VISIBCount = iprot.readI64();
              struct.setVISIBCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WDSP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.WDSP = iprot.readDouble();
              struct.setWDSPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WDSPCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.WDSPCount = iprot.readI64();
              struct.setWDSPCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MAXSPD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.MAXSPD = iprot.readDouble();
              struct.setMAXSPDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GUST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.GUST = iprot.readDouble();
              struct.setGUSTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.MAX = iprot.readDouble();
              struct.setMAXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MAXFLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MAXFlag = iprot.readString();
              struct.setMAXFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.MIN = iprot.readDouble();
              struct.setMINIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MINFLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MINFlag = iprot.readString();
              struct.setMINFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRCP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.PRCP = iprot.readDouble();
              struct.setPRCPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PRCPFLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PRCPFlag = iprot.readString();
              struct.setPRCPFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SNDP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SNDP = iprot.readDouble();
              struct.setSNDPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FRSHTT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FRSHTT = iprot.readString();
              struct.setFRSHTTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSTN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'STN' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWBAN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'WBAN' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetYEARMODA()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'YEARMODA' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTMP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'TMP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTMPCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'TMPCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDEWP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DEWP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDEWPCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DEWPCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSLP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SLP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSLPCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SLPCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSTP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'STP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSTPCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'STPCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVISIB()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'VISIB' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVISIBCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'VISIBCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWDSP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'WDSP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWDSPCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'WDSPCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMAXSPD()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'MAXSPD' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGUST()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'GUST' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMAX()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'MAX' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMIN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'MIN' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPRCP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'PRCP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSNDP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SNDP' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WeatherData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STN_FIELD_DESC);
      oprot.writeI64(struct.STN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WBAN_FIELD_DESC);
      oprot.writeI64(struct.WBAN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEARMODA_FIELD_DESC);
      oprot.writeI64(struct.YEARMODA);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TMP_FIELD_DESC);
      oprot.writeDouble(struct.TMP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TMPCOUNT_FIELD_DESC);
      oprot.writeI64(struct.TMPCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEWP_FIELD_DESC);
      oprot.writeDouble(struct.DEWP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEWPCOUNT_FIELD_DESC);
      oprot.writeI64(struct.DEWPCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLP_FIELD_DESC);
      oprot.writeDouble(struct.SLP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLPCOUNT_FIELD_DESC);
      oprot.writeI64(struct.SLPCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STP_FIELD_DESC);
      oprot.writeDouble(struct.STP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STPCOUNT_FIELD_DESC);
      oprot.writeI64(struct.STPCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VISIB_FIELD_DESC);
      oprot.writeDouble(struct.VISIB);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VISIBCOUNT_FIELD_DESC);
      oprot.writeI64(struct.VISIBCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WDSP_FIELD_DESC);
      oprot.writeDouble(struct.WDSP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WDSPCOUNT_FIELD_DESC);
      oprot.writeI64(struct.WDSPCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXSPD_FIELD_DESC);
      oprot.writeDouble(struct.MAXSPD);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUST_FIELD_DESC);
      oprot.writeDouble(struct.GUST);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FIELD_DESC);
      oprot.writeDouble(struct.MAX);
      oprot.writeFieldEnd();
      if (struct.MAXFlag != null) {
        oprot.writeFieldBegin(MAXFLAG_FIELD_DESC);
        oprot.writeString(struct.MAXFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_FIELD_DESC);
      oprot.writeDouble(struct.MIN);
      oprot.writeFieldEnd();
      if (struct.MINFlag != null) {
        oprot.writeFieldBegin(MINFLAG_FIELD_DESC);
        oprot.writeString(struct.MINFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRCP_FIELD_DESC);
      oprot.writeDouble(struct.PRCP);
      oprot.writeFieldEnd();
      if (struct.PRCPFlag != null) {
        oprot.writeFieldBegin(PRCPFLAG_FIELD_DESC);
        oprot.writeString(struct.PRCPFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SNDP_FIELD_DESC);
      oprot.writeDouble(struct.SNDP);
      oprot.writeFieldEnd();
      if (struct.FRSHTT != null) {
        oprot.writeFieldBegin(FRSHTT_FIELD_DESC);
        oprot.writeString(struct.FRSHTT);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeatherDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeatherDataTupleScheme getScheme() {
      return new WeatherDataTupleScheme();
    }
  }

  private static class WeatherDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<WeatherData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WeatherData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.STN);
      oprot.writeI64(struct.WBAN);
      oprot.writeI64(struct.YEARMODA);
      oprot.writeDouble(struct.TMP);
      oprot.writeI64(struct.TMPCount);
      oprot.writeDouble(struct.DEWP);
      oprot.writeI64(struct.DEWPCount);
      oprot.writeDouble(struct.SLP);
      oprot.writeI64(struct.SLPCount);
      oprot.writeDouble(struct.STP);
      oprot.writeI64(struct.STPCount);
      oprot.writeDouble(struct.VISIB);
      oprot.writeI64(struct.VISIBCount);
      oprot.writeDouble(struct.WDSP);
      oprot.writeI64(struct.WDSPCount);
      oprot.writeDouble(struct.MAXSPD);
      oprot.writeDouble(struct.GUST);
      oprot.writeDouble(struct.MAX);
      oprot.writeString(struct.MAXFlag);
      oprot.writeDouble(struct.MIN);
      oprot.writeString(struct.MINFlag);
      oprot.writeDouble(struct.PRCP);
      oprot.writeString(struct.PRCPFlag);
      oprot.writeDouble(struct.SNDP);
      oprot.writeString(struct.FRSHTT);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WeatherData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.STN = iprot.readI64();
      struct.setSTNIsSet(true);
      struct.WBAN = iprot.readI64();
      struct.setWBANIsSet(true);
      struct.YEARMODA = iprot.readI64();
      struct.setYEARMODAIsSet(true);
      struct.TMP = iprot.readDouble();
      struct.setTMPIsSet(true);
      struct.TMPCount = iprot.readI64();
      struct.setTMPCountIsSet(true);
      struct.DEWP = iprot.readDouble();
      struct.setDEWPIsSet(true);
      struct.DEWPCount = iprot.readI64();
      struct.setDEWPCountIsSet(true);
      struct.SLP = iprot.readDouble();
      struct.setSLPIsSet(true);
      struct.SLPCount = iprot.readI64();
      struct.setSLPCountIsSet(true);
      struct.STP = iprot.readDouble();
      struct.setSTPIsSet(true);
      struct.STPCount = iprot.readI64();
      struct.setSTPCountIsSet(true);
      struct.VISIB = iprot.readDouble();
      struct.setVISIBIsSet(true);
      struct.VISIBCount = iprot.readI64();
      struct.setVISIBCountIsSet(true);
      struct.WDSP = iprot.readDouble();
      struct.setWDSPIsSet(true);
      struct.WDSPCount = iprot.readI64();
      struct.setWDSPCountIsSet(true);
      struct.MAXSPD = iprot.readDouble();
      struct.setMAXSPDIsSet(true);
      struct.GUST = iprot.readDouble();
      struct.setGUSTIsSet(true);
      struct.MAX = iprot.readDouble();
      struct.setMAXIsSet(true);
      struct.MAXFlag = iprot.readString();
      struct.setMAXFlagIsSet(true);
      struct.MIN = iprot.readDouble();
      struct.setMINIsSet(true);
      struct.MINFlag = iprot.readString();
      struct.setMINFlagIsSet(true);
      struct.PRCP = iprot.readDouble();
      struct.setPRCPIsSet(true);
      struct.PRCPFlag = iprot.readString();
      struct.setPRCPFlagIsSet(true);
      struct.SNDP = iprot.readDouble();
      struct.setSNDPIsSet(true);
      struct.FRSHTT = iprot.readString();
      struct.setFRSHTTIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

